// Module implements the parser has defined in: https://github.com/taoqf/node-html-parser

use phf::phf_map;
use std::str::FromStr;
use strum_macros::EnumString;

// https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name
static MARKUP_PATTERN_REGEXP: &'static str = r#"<!--[\s\S]*?-->|<(\/?)([a-zA-Z][-.:0-9_a-zA-Z]*)((?:\s+[^>]*?(?:(?:'[^']*')|(?:"[^"]*"))?)*)\s*(\/?)>"#; // use with ".."/g"
static ATTRIBUTE_PATTERN: &'static str =
    r#"/(?:^|\s)(id|class)\s*=\s*((?:'[^']*')|(?:"[^"]*")|\S+)"#; // use with /../gi

static SVG_TAGS: &'static [&'static str] = &[
    "a",
    "altGlyph",
    "altGlyphDef",
    "altGlyphItem",
    "animate",
    "animateColor",
    "animateMotion",
    "animateTransform",
    "circle",
    "clipPath",
    "cursor",
    "defs",
    "desc",
    "discard",
    "ellipse",
    "feBlend",
    "feColorMatrix",
    "feComponentTransfer",
    "feComposite",
    "feConvolveMatrix",
    "feDiffuseLighting",
    "feDisplacementMap",
    "feDistantLight",
    "feDropShadow",
    "feFlood",
    "feFuncA",
    "feFuncB",
    "feFuncG",
    "feFuncR",
    "feGaussianBlur",
    "feImage",
    "feMerge",
    "feMergeNode",
    "feMorphology",
    "feOffset",
    "fePointLight",
    "feSpecularLighting",
    "feSpotLight",
    "feTile",
    "feTurbulence",
    "filter",
    "font",
    "foreignObject",
    "g",
    "glyph",
    "glyphRef",
    "hatch",
    "hatchpath",
    "hkern",
    "image",
    "line",
    "linearGradient",
    "marker",
    "mask",
    "mesh",
    "meshgradient",
    "meshpatch",
    "meshrow",
    "metadata",
    "mpath",
    "path",
    "tiled",
    "pattern",
    "polygon",
    "polyline",
    "radialGradient",
    "rect",
    "script",
    "set",
    "solidcolor",
    "stop",
    "style",
    "svg",
    "switch",
    "symbol",
    "text",
    "textPath",
    "title",
    "tref",
    "tspan",
    "unknown",
    "use",
    "view",
    "vkern",
];

static HTML_TAGS: &'static [&'static str] = &[
    "a",
    "abbr",
    "address",
    "area",
    "article",
    "aside",
    "audio",
    "b",
    "base",
    "bdi",
    "bdo",
    "blockquote",
    "br",
    "button",
    "canvas",
    "caption",
    "cite",
    "code",
    "col",
    "colgroup",
    "data",
    "datalist",
    "dd",
    "del",
    "details",
    "dfn",
    "dialog",
    "div",
    "dl",
    "dt",
    "em",
    "embed",
    "fieldset",
    "figcaption",
    "figure",
    "footer",
    "form",
    "h1",
    "h2",
    "h3",
    "h4",
    "h5",
    "h6",
    "header",
    "hgroup",
    "hr",
    "i",
    "iframe",
    "img",
    "input",
    "ins",
    "kbd",
    "label",
    "legend",
    "li",
    "link",
    "main",
    "map",
    "mark",
    "menu",
    "menuitem",
    "meta",
    "meter",
    "nav",
    "noframes",
    "noscript",
    "object",
    "ol",
    "optgroup",
    "option",
    "output",
    "p",
    "param",
    "picture",
    "monospace",
    "pre",
    "progress",
    "q",
    "rp",
    "rt",
    "rtc",
    "ruby",
    "s",
    "samp",
    "script",
    "section",
    "select",
    "slot",
    "small",
    "source",
    "span",
    "strong",
    "style",
    "sub",
    "summary",
    "sup",
    "table",
    "tbody",
    "td",
    "template",
    "textarea",
    "tfoot",
    "th",
    "thead",
    "time",
    "title",
    "tr",
    "track",
    "u",
    "ul",
    "var",
    "video",
    "wbr",
];

#[derive(Debug, Clone, PartialEq, EnumString)]
pub enum SVGTags {
    A,
    Altglyph,
    Altglyphdef,
    Altglyphitem,
    Animate,
    Animatecolor,
    Animatemotion,
    Animatetransform,
    Circle,
    Clippath,
    Cursor,
    Defs,
    Desc,
    Discard,
    Ellipse,
    Feblend,
    Fecolormatrix,
    Fecomponenttransfer,
    Fecomposite,
    Feconvolvematrix,
    Fediffuselighting,
    Fedisplacementmap,
    Fedistantlight,
    Fedropshadow,
    Feflood,
    Fefunca,
    Fefuncb,
    Fefuncg,
    Fefuncr,
    Fegaussianblur,
    Feimage,
    Femerge,
    Femergenode,
    Femorphology,
    Feoffset,
    Fepointlight,
    Fespecularlighting,
    Fespotlight,
    Fetile,
    Feturbulence,
    Filter,
    Font,
    Foreignobject,
    G,
    Glyph,
    Glyphref,
    Hatch,
    Hatchpath,
    Hkern,
    Image,
    Line,
    Lineargradient,
    Marker,
    Mask,
    Mesh,
    Meshgradient,
    Meshpatch,
    Meshrow,
    Metadata,
    Mpath,
    Path,
    Tiled,
    Pattern,
    Polygon,
    Polyline,
    Radialgradient,
    Rect,
    Script,
    Set,
    Solidcolor,
    Stop,
    Style,
    Svg,
    Switch,
    Symbol,
    Text,
    Textpath,
    Title,
    Tref,
    Tspan,
    Unknown,
    Use,
    View,
    Vkern,
}

impl<'b> Into<&'b str> for SVGTags {
    fn into(self) -> &'b str {
        match self {
            SVGTags::A => "a",
            SVGTags::Altglyph => "altGlyph",
            SVGTags::Altglyphdef => "altGlyphDef",
            SVGTags::Altglyphitem => "altGlyphItem",
            SVGTags::Animate => "animate",
            SVGTags::Animatecolor => "animateColor",
            SVGTags::Animatemotion => "animateMotion",
            SVGTags::Animatetransform => "animateTransform",
            SVGTags::Circle => "circle",
            SVGTags::Clippath => "clipPath",
            SVGTags::Cursor => "cursor",
            SVGTags::Defs => "defs",
            SVGTags::Desc => "desc",
            SVGTags::Discard => "discard",
            SVGTags::Ellipse => "ellipse",
            SVGTags::Feblend => "feBlend",
            SVGTags::Fecolormatrix => "feColorMatrix",
            SVGTags::Fecomponenttransfer => "feComponentTransfer",
            SVGTags::Fecomposite => "feComposite",
            SVGTags::Feconvolvematrix => "feConvolveMatrix",
            SVGTags::Fediffuselighting => "feDiffuseLighting",
            SVGTags::Fedisplacementmap => "feDisplacementMap",
            SVGTags::Fedistantlight => "feDistantLight",
            SVGTags::Fedropshadow => "feDropShadow",
            SVGTags::Feflood => "feFlood",
            SVGTags::Fefunca => "feFuncA",
            SVGTags::Fefuncb => "feFuncB",
            SVGTags::Fefuncg => "feFuncG",
            SVGTags::Fefuncr => "feFuncR",
            SVGTags::Fegaussianblur => "feGaussianBlur",
            SVGTags::Feimage => "feImage",
            SVGTags::Femerge => "feMerge",
            SVGTags::Femergenode => "feMergeNode",
            SVGTags::Femorphology => "feMorphology",
            SVGTags::Feoffset => "feOffset",
            SVGTags::Fepointlight => "fePointLight",
            SVGTags::Fespecularlighting => "feSpecularLighting",
            SVGTags::Fespotlight => "feSpotLight",
            SVGTags::Fetile => "feTile",
            SVGTags::Feturbulence => "feTurbulence",
            SVGTags::Filter => "filter",
            SVGTags::Font => "font",
            SVGTags::Foreignobject => "foreignObject",
            SVGTags::G => "g",
            SVGTags::Glyph => "glyph",
            SVGTags::Glyphref => "glyphRef",
            SVGTags::Hatch => "hatch",
            SVGTags::Hatchpath => "hatchpath",
            SVGTags::Hkern => "hkern",
            SVGTags::Image => "image",
            SVGTags::Line => "line",
            SVGTags::Lineargradient => "linearGradient",
            SVGTags::Marker => "marker",
            SVGTags::Mask => "mask",
            SVGTags::Mesh => "mesh",
            SVGTags::Meshgradient => "meshgradient",
            SVGTags::Meshpatch => "meshpatch",
            SVGTags::Meshrow => "meshrow",
            SVGTags::Metadata => "metadata",
            SVGTags::Mpath => "mpath",
            SVGTags::Path => "path",
            SVGTags::Tiled => "tiled",
            SVGTags::Pattern => "pattern",
            SVGTags::Polygon => "polygon",
            SVGTags::Polyline => "polyline",
            SVGTags::Radialgradient => "radialGradient",
            SVGTags::Rect => "rect",
            SVGTags::Script => "script",
            SVGTags::Set => "set",
            SVGTags::Solidcolor => "solidcolor",
            SVGTags::Stop => "stop",
            SVGTags::Style => "style",
            SVGTags::Svg => "svg",
            SVGTags::Switch => "switch",
            SVGTags::Symbol => "symbol",
            SVGTags::Text => "text",
            SVGTags::Textpath => "textPath",
            SVGTags::Title => "title",
            SVGTags::Tref => "tref",
            SVGTags::Tspan => "tspan",
            SVGTags::Unknown => "unknown",
            SVGTags::Use => "use",
            SVGTags::View => "view",
            SVGTags::Vkern => "vkern",
        }
    }
}

#[derive(Debug, Clone, PartialEq, EnumString)]
pub enum HTMLTags {
    A,
    Abbr,
    Address,
    Area,
    Article,
    Aside,
    Audio,
    B,
    Base,
    Bdi,
    Bdo,
    Blockquote,
    Br,
    Button,
    Canvas,
    Caption,
    Cite,
    Code,
    Col,
    Colgroup,
    Data,
    Datalist,
    Dd,
    Del,
    Details,
    Dfn,
    Dialog,
    Div,
    Dl,
    Dt,
    Em,
    Embed,
    Fieldset,
    Figcaption,
    Figure,
    Footer,
    Form,
    H1,
    H2,
    H3,
    H4,
    H5,
    H6,
    Header,
    Hgroup,
    Hr,
    I,
    Iframe,
    Img,
    Input,
    Ins,
    Kbd,
    Label,
    Legend,
    Li,
    Link,
    Main,
    Map,
    Mark,
    Menu,
    Menuitem,
    Meta,
    Meter,
    Nav,
    Noframes,
    Noscript,
    Object,
    Ol,
    Optgroup,
    Option,
    Output,
    P,
    Param,
    Picture,
    Monospace,
    Pre,
    Progress,
    Q,
    Rp,
    Rt,
    Rtc,
    Ruby,
    S,
    Samp,
    Script,
    Section,
    Select,
    Slot,
    Small,
    Source,
    Span,
    Strong,
    Style,
    Sub,
    Summary,
    Sup,
    Table,
    Tbody,
    Td,
    Template,
    Textarea,
    Tfoot,
    Th,
    Thead,
    Time,
    Title,
    Tr,
    Track,
    U,
    Ul,
    Var,
    Video,
    Wbr,
}

impl<'b> Into<&'b str> for HTMLTags {
    fn into(self) -> &'b str {
        match self {
            HTMLTags::A => "A",
            HTMLTags::Abbr => "Abbr",
            HTMLTags::Address => "Address",
            HTMLTags::Area => "Area",
            HTMLTags::Article => "Article",
            HTMLTags::Aside => "Aside",
            HTMLTags::Audio => "Audio",
            HTMLTags::B => "B",
            HTMLTags::Base => "Base",
            HTMLTags::Bdi => "Bdi",
            HTMLTags::Bdo => "Bdo",
            HTMLTags::Blockquote => "Blockquote",
            HTMLTags::Br => "Br",
            HTMLTags::Button => "Button",
            HTMLTags::Canvas => "Canvas",
            HTMLTags::Caption => "Caption",
            HTMLTags::Cite => "Cite",
            HTMLTags::Code => "Code",
            HTMLTags::Col => "Col",
            HTMLTags::Colgroup => "Colgroup",
            HTMLTags::Data => "Data",
            HTMLTags::Datalist => "Datalist",
            HTMLTags::Dd => "Dd",
            HTMLTags::Del => "Del",
            HTMLTags::Details => "Details",
            HTMLTags::Dfn => "Dfn",
            HTMLTags::Dialog => "Dialog",
            HTMLTags::Div => "Div",
            HTMLTags::Dl => "Dl",
            HTMLTags::Dt => "Dt",
            HTMLTags::Em => "Em",
            HTMLTags::Embed => "Embed",
            HTMLTags::Fieldset => "Fieldset",
            HTMLTags::Figcaption => "Figcaption",
            HTMLTags::Figure => "Figure",
            HTMLTags::Footer => "Footer",
            HTMLTags::Form => "Form",
            HTMLTags::H1 => "H1",
            HTMLTags::H2 => "H2",
            HTMLTags::H3 => "H3",
            HTMLTags::H4 => "H4",
            HTMLTags::H5 => "H5",
            HTMLTags::H6 => "H6",
            HTMLTags::Header => "Header",
            HTMLTags::Hgroup => "Hgroup",
            HTMLTags::Hr => "Hr",
            HTMLTags::I => "I",
            HTMLTags::Iframe => "Iframe",
            HTMLTags::Img => "Img",
            HTMLTags::Input => "Input",
            HTMLTags::Ins => "Ins",
            HTMLTags::Kbd => "Kbd",
            HTMLTags::Label => "Label",
            HTMLTags::Legend => "Legend",
            HTMLTags::Li => "Li",
            HTMLTags::Link => "Link",
            HTMLTags::Main => "Main",
            HTMLTags::Map => "Map",
            HTMLTags::Mark => "Mark",
            HTMLTags::Menu => "Menu",
            HTMLTags::Menuitem => "Menuitem",
            HTMLTags::Meta => "Meta",
            HTMLTags::Meter => "Meter",
            HTMLTags::Nav => "Nav",
            HTMLTags::Noframes => "Noframes",
            HTMLTags::Noscript => "Noscript",
            HTMLTags::Object => "Object",
            HTMLTags::Ol => "Ol",
            HTMLTags::Optgroup => "Optgroup",
            HTMLTags::Option => "Option",
            HTMLTags::Output => "Output",
            HTMLTags::P => "P",
            HTMLTags::Param => "Param",
            HTMLTags::Picture => "Picture",
            HTMLTags::Monospace => "Monospace",
            HTMLTags::Pre => "Pre",
            HTMLTags::Progress => "Progress",
            HTMLTags::Q => "Q",
            HTMLTags::Rp => "Rp",
            HTMLTags::Rt => "Rt",
            HTMLTags::Rtc => "Rtc",
            HTMLTags::Ruby => "Ruby",
            HTMLTags::S => "S",
            HTMLTags::Samp => "Samp",
            HTMLTags::Script => "Script",
            HTMLTags::Section => "Section",
            HTMLTags::Select => "Select",
            HTMLTags::Slot => "Slot",
            HTMLTags::Small => "Small",
            HTMLTags::Source => "Source",
            HTMLTags::Span => "Span",
            HTMLTags::Strong => "Strong",
            HTMLTags::Style => "Style",
            HTMLTags::Sub => "Sub",
            HTMLTags::Summary => "Summary",
            HTMLTags::Sup => "Sup",
            HTMLTags::Table => "Table",
            HTMLTags::Tbody => "Tbody",
            HTMLTags::Td => "Td",
            HTMLTags::Template => "Template",
            HTMLTags::Textarea => "Textarea",
            HTMLTags::Tfoot => "Tfoot",
            HTMLTags::Th => "Th",
            HTMLTags::Thead => "Thead",
            HTMLTags::Time => "Time",
            HTMLTags::Title => "Title",
            HTMLTags::Tr => "Tr",
            HTMLTags::Track => "Track",
            HTMLTags::U => "U",
            HTMLTags::Ul => "Ul",
            HTMLTags::Var => "Var",
            HTMLTags::Video => "Video",
            HTMLTags::Wbr => "Wbr",
        }
    }
}

#[derive(Debug, Clone, PartialEq)]
pub enum MarkupTags {
    SVG(SVGTags),
    HTML(HTMLTags),
}

impl MarkupTags {
    pub fn to_str<'a>(self) -> &'a str {
        match self {
            MarkupTags::SVG(sg) => sg.into(),
            MarkupTags::HTML(ht) => ht.into(),
        }
    }

    pub fn is_block_tag(tag: MarkupTags) -> bool {
        if MarkupTags::is_table_tag(tag.clone())
            || MarkupTags::is_d_tag(tag.clone())
            || MarkupTags::is_header_tag(tag.clone())
            || MarkupTags::is_f_tag(tag.clone())
        {
            return true;
        }
        match tag {
            MarkupTags::HTML(t) => match t {
                HTMLTags::Address
                | HTMLTags::Article
                | HTMLTags::Aside
                | HTMLTags::Blockquote
                | HTMLTags::Br
                | HTMLTags::Main
                | HTMLTags::Nav
                | HTMLTags::P
                | HTMLTags::Pre
                | HTMLTags::Section
                | HTMLTags::Hr
                | HTMLTags::Ol
                | HTMLTags::Ul
                | HTMLTags::Li => true,
                _ => false,
            },
            _ => false,
        }
    }
    pub fn is_table_tag(tag: MarkupTags) -> bool {
        match tag {
            MarkupTags::HTML(t) => match t {
                HTMLTags::Tfoot
                | HTMLTags::Tbody
                | HTMLTags::Thead
                | HTMLTags::Th
                | HTMLTags::Tr
                | HTMLTags::Td
                | HTMLTags::Table => true,
                _ => false,
            },
            _ => false,
        }
    }

    pub fn is_f_tag(tag: MarkupTags) -> bool {
        match tag {
            MarkupTags::HTML(t) => match t {
                HTMLTags::Form
                | HTMLTags::Footer
                | HTMLTags::Figure
                | HTMLTags::Figcaption
                | HTMLTags::Fieldset => true,
                _ => false,
            },
            _ => false,
        }
    }

    pub fn is_d_tag(tag: MarkupTags) -> bool {
        match tag {
            MarkupTags::HTML(t) => match t {
                HTMLTags::Details
                | HTMLTags::Dialog
                | HTMLTags::Dd
                | HTMLTags::Div
                | HTMLTags::Dt => true,
                _ => false,
            },
            _ => false,
        }
    }

    pub fn is_header_tag(tag: MarkupTags) -> bool {
        match tag {
            MarkupTags::HTML(t) => match t {
                HTMLTags::H1
                | HTMLTags::H2
                | HTMLTags::H3
                | HTMLTags::H4
                | HTMLTags::H5
                | HTMLTags::H6
                | HTMLTags::Header
                | HTMLTags::Hgroup => true,
                _ => false,
            },
            _ => false,
        }
    }
}
